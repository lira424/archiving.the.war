---
import { Badge, Icon } from '@astrojs/starlight/components';
import type { StarlightIcon } from '@astrojs/starlight/types';


interface Props {
  iconName?: StarlightIcon;
  text?: string;
  variant?: 'default' | 'note' | 'danger' | 'success' | 'caution' | 'tip';  
}

const { iconName , text, variant = "note"} = Astro.props;

const id = crypto.randomUUID();
---

<button popovertarget={id} class:list={["sl-badge", variant]} onmouseenter="this.nextElementSibling.showPopover()" onmouseleave="this.nextElementSibling.hidePopover()">
  <slot name="trigger"/>
  {iconName && <Icon name={iconName} />}
 {text} 
</button>

<div id={id} popover onmouseenter="this.showPopover()" onmouseleave="this.hidePopover()">
  <slot />
</div>
  
<style>
  


  button[popovertarget] {
    position: relative;
    cursor: pointer;
    border: none;
    background: transparent;
    padding: 0.25rem;
    border-radius: 0.25rem;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    transition: background-color 0.2s ease;
    anchor-name: --popover-anchor;
  }

  button[popovertarget]:hover {
    /* background-color: var(--sl-color-gray-6); */
  }

  [popover] {
    /* Use modern popover positioning */
    position-anchor: --popover-anchor;
    position-area: inline-start;
    
    /* Fallback positioning for browsers without anchor positioning */
    position: fixed;
    inset: unset;
    margin: 0;
    
    /* Styling */
    padding: 0.75rem;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    background: var(--sl-color-bg);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    max-width: min(300px, 90vw);
    min-width: 200px;
    font-size: 0.875rem;
    line-height: 1.4;
    color: var(--sl-color-text);
    
    /* Animations */
    opacity: 0;
    scale: 0.95;
    transition: opacity 0.2s ease, scale 0.2s ease, overlay 0.2s ease allow-discrete, display 0.2s ease allow-discrete;
    
    /* Ensure it stays within viewport */
    overflow-clip-margin: 1rem;
    overflow-x: hidden;
  }

  [popover]:popover-open {
    opacity: 1;
    scale: 1;
  }

  /* Fallback positioning for browsers without anchor positioning */
  @supports not (anchor-name: --test) {
    [popover] {
      position: absolute;
      top: 0;
      left: calc(100% + 0.5rem);
      transform: translateY(-50%);
      
      /* Keep within viewport bounds */
      max-width: min(300px, calc(100vw - 100% - 1rem));
    }
    
    /* Flip to left side if no space on right */
    [popover]:has(~ button[popovertarget]) {
      left: auto;
      right: calc(100% + 0.5rem);
    }
  }

  /* Arrow indicator */
  [popover]::before {
    content: '';
    position: absolute;
    width: 8px;
    height: 8px;
    background: var(--sl-color-bg);
    border: 1px solid var(--sl-color-gray-5);
    border-bottom: none;
    border-right: none;
    transform: rotate(45deg);
    left: -4px;
    top: 50%;
    margin-top: -4px;
  }

  /* Container to establish positioning context */
  :global(.popover-container) {
    position: relative;
    display: inline-block;
  }

  /* Modern @starting-style for entry animations */
  @supports (transition-behavior: allow-discrete) {
    [popover] {
      transition-behavior: allow-discrete;
    }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    [popover] {
      position-area: block-end;
      max-width: min(280px, 90vw);
      left: 50% !important;
      right: auto !important;
      transform: translateX(-50%) !important;
      top: calc(100% + 0.5rem) !important;
    }
    
    [popover]::before {
      left: 50%;
      top: -4px;
      margin-left: -4px;
      margin-top: 0;
      transform: rotate(-135deg);
    }
  }
</style>